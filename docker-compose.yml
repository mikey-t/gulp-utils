version: '3.9'
services:
  sonarqube:
    image: sonarqube:10.2.1-community
    ports:
      - "${SONAR_PORT:-9000}:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://db:5432/sonar
      - SONAR_JDBC_USERNAME=${POSTGRES_USER:?}
      - SONAR_JDBC_PASSWORD=${POSTGRES_PASSWORD:?}
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - sonarnet
    depends_on:
      - db

  db:
    image: postgres:15.4
    ports:
      - "${POSTGRES_PORT:-5432}:5432" # Note that sonar will always use 5432 - only exposing this port here in case you want to access it directly from the host system
    environment:
      - POSTGRES_USER=${POSTGRES_USER:?}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?}
    volumes:
      - sonar_postgresql:/var/lib/postgresql
      - sonar_postgresql_data:/var/lib/postgresql/data
    networks:
      - sonarnet

  sonar-scanner:
    image: sonarsource/sonar-scanner-cli
    user: root
    environment:
      - SONAR_HOST_URL=http://sonarqube:${SONAR_PORT:-9000}
      - SONAR_TOKEN=${SONAR_TOKEN:?}
    volumes:
      - .:/usr/src
      - sonar_scanner_cache:/opt/sonar-scanner/.sonar/cache
    networks:
      - sonarnet
    profiles: [ "manual" ] # This prevents sonar-scanner from being started with "docker compose up"
    command: sh -c "mkdir -p /tmp/sonar-scanner && sonar-scanner -Dsonar.working.directory=/tmp/sonar-scanner"

networks:
  sonarnet:


volumes:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  sonar_postgresql:
  sonar_postgresql_data:
  sonar_scanner_cache:
